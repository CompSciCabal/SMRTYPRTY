(require-extension sicp)
;; Exercise 1.9: Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.

;; (define (+ a b)
;;   (if (= a 0)
;;       b
;;       (inc (+ (dec a) b))))


;;   (if (= a 0)
;;       b
;;       (+ (dec a) (inc b))))
;; Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive?


;; SOLUTION

;; First method is recursive

;; (+ 4 5)
;; (inc (+ 3 5))
;; (inc (inc (+ 2 5)))
;; (inc (inc (inc (+ 1 5))))
;; (inc (inc (inc (inc (+ 0 5)))))
;; (inc (inc (inc (inc 5))))
;; (inc (inc (inc 6)))
;; (inc (inc 7))
;; (inc 8)
;; 9

;; Second method is iterative
;; (+ 4 5)
;; (+ 3 6)
;; (+ 2 7)
;; (+ 1 8)
;; (+ 0 9)
;; 9


;; -----------------------------------


;; Exercise 1.10: The following procedure computes a mathematical function called Ackermann’s function.

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))


;; What are the values of the following expressions?

;; (A 1 10)
;; Answer: 1024

;; (A 2 4)
;; Answer: 65536

;; (A 3 3)
;; Answer: 65536


;; Consider the following procedures, where A is the procedure defined above:
(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))
;; Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes 5n^2.


;; (f n) computes 2*n
;; (g n) computes 2^n
;; (h n) computes 2^2^2^2^2 n times (2⬆⬆n in Knuth's notation)
;; (k n) computes 5n^2

;; Scratch work below:
;; (A 2 2)
;; (A 1 (A 2 1))
;; (A 1 2)
;; 4

;; (A 2 3)
;; (A 1 (A 2 2))
;; (A 1 4)
;; 16

;; (A 2 4)
;; (A 1 (A 2 3))
;; (A 1 16)
;; 65536

;; (A 2 5)
;; (A 1 65536)

;; -----------------------------------

;; Exercise 1.12: The following pattern of numbers is called Pascal’s triangle.

;;         1
;;       1   1
;;     1   2   1
;;   1   3   3   1
;; 1   4   6   4   1
;; . . .
;; The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it.
;; Write a procedure that computes elements of Pascal’s triangle by means of a recursive process.


;; Solution
;;
;; Let's look at the triangle like this:

;;      Col
;; Row | 0  1  2  3  4
;;     -----------------
;;   0 | 1
;;   1 | 1   1
;;   2 | 1   2   1
;;   3 | 1   3   3   1
;;   4 | 1   4   6   4   1
;;
(define (pascal row col)
  (cond ((or (< row 0)
             (< col 0))
         0)
        ((and (= row 0) (= col 0))
         1)

        (else (+ (pascal (dec row) (dec col))
                 (pascal (dec row) col)))))

;; --------------------------------------
;; Exercise 1.13: Prove that Fib(n) is the closest integer to \phi^n/sqrt(5)
;; where \phi=(1+sqrt(5)/2. Hint: Let \psi=(1−sqrt(5))/2.

;; Use induction and the definition of the Fibonacci numbers (see 1.2.2) to
;; prove that Fib(n)=(\phi^n-\psi^n)/sqrt(5)

;; Solution

;; Fib(0) = 0
;; (\phi^0 - \psi^0)/sqrt(5) = 0/sqrt(5) = 0
;; Fib(1) = 1
;; (\phi^1 - \psi^1)/sqrt(5) = ((1+sqrt(5))2 - (1-sqrt(5))2)/sqrt(5) = (2sqrt(5)/2)/sqrt(5)=1

;; Assume that for all i <= n, Fib(i) = (\phi^n-\psi^2)/sqrt(5)
;; Fib(n) = Fib(n-1) + Fib(n-2)
;;          = (\phi^(n-1) - \psi^(n-1))/sqrt(5) + (\phi^(n-2)-\psi^(n-2))/sqrt(5)
;;          = (\phi^(n)(\phi^-1 + \phi^(-2)) - \psi^(n)(\psi^-1+\psi^-2))/sqrt(5)
;;          = (\phi^(n)(2/(sqrt(5)+1)+4/(6+2sqrt(5))) - (\psi^(n)(2/(sqrt(5)-1)+4/(6-2sqrt(5)))))/sqrt(5)
;;          = (\phi^(n)-\psi^n)

;; Also note that \psi^n < .5 when n >=2, so we are going to be the closest integer.

;; -------------------------------------------------
;; Exercise 1.14: Draw the tree illustrating the process generated by the count-change procedure of 1.2.2 in making change for 11 cents. What are the orders of growth of the space and number of steps used by this process as the amount to be changed increases?

;; Solution

;; (cc 11 5) - (cc -39 5)
;;     |      
;; (cc 11 4) - (cc -24 4)
;;     |
;; (cc 11 3) - (cc 1 3) - (cc -9 3)
;;     |            |
;;     |       (cc 1 2) - (cc -4 2)
;;     |           |
;;     |       (cc 1 1) - (cc 0 1)
;;     |           |
;;     |       (cc 1 0)
;;     |
;;     |
;; (cc 11 2) - (cc 6 2) - (cc 5 2) - (cc 0 2)
;; |              |         |
;; |              |        (cc 5 1) - (cc 4 1) - (cc 3 1) - (cc 2 1) - (cc 1 1) - (cc 0 1)
;; |              |                       |         |         |            |
;; |              |                   (cc 4 0)   (cc 3 0)   (cc 2 0)   (cc 1 0)
;; |              |
;; |              |
;; |            (cc 6 1) - (cc 5 1) - (cc 4 1) - (cc 3 1) - (cc 2 1) - (cc 1 1) - (cc 1 0)
;; |                |           |        |         |         |            |
;; |            (cc 6 0)   (cc 5 0)   (cc 4 0)   (cc 3 0)   (cc 2 0)   (cc 1 0)
;; |
;; (cc 11 1) - (cc 10 1) - (cc 9 1) - (cc 8 1) - (cc 7 1) - (cc 6 1) - (cc 5 1) - (cc 4 1) - (cc 3 1) - (cc 2 1) - (cc 1 1) - (cc 1 0)
;; |              |          |            |       |           |            |       |          |             |         |
;; |            (cc 10 0)   (cc 9 0)   (cc 8 0)   (cc 7 0)   (cc 6 0)   (cc 5 0)    (cc 4 0)   (cc 3 0)   (cc 2 0)   (cc 1 0)
;; |
;; |
;; (cc 11 0)

;; Both orders of growth are 2^n


;; ---------------------------------------------

;; Exercise 1.15: The sine of an angle (specified in radians) can be computed by making use of the approximation sinx≈xsin⁡x≈x if xx is sufficiently small, and the trigonometric identity
;; sinx=3sinx3−4sin3x3
;; sin⁡x=3sin⁡x3−4sin3⁡x3
;; to reduce the size of the argument of sin. (For purposes of this exercise an angle is considered “sufficiently small” if its magnitude is not greater than 0.1 radians.) These ideas are incorporated in the following procedures:

(define (cube x) (* x x x))
(define (p x)
  (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))

;; 1. How many times is the procedure p applied when (sine 12.15) is evaluated?
;; It's log base 1/3 of .1/12.15 * 2 - 1
;; 5

;; 2. What is the order of growth in space and number of steps (as a function of aa) used by the process generated by the sine procedure when (sine a) is evaluated?
;; Logarithmic in time (see above). Space complexity is logarithmic as well.


;; ---------------------------

;; Exercise 1.16: Design a procedure that evolves an iterative exponentiation
;; process that uses successive squaring and uses a logarithmic number of steps,
;; as does fast-expt. (Hint: Using the observation that
;; (bn/2)2=(b2)n/2(bn/2)2=(b2)n/2, keep, along with the exponent nn and the base
;; bb, an additional state variable aa, and define the state transformation in
;; such a way that the product abnabn is unchanged from state to state. At the
;; beginning of the process aa is taken to be 1, and the answer is given by the
;; value of aa at the end of the process. In general, the technique of defining
;; an invariant quantity that remains unchanged from state to state is a
;; powerful way to think about the design of iterative algorithms.)

(define (fast-expt b n)
  (cond ((<= n 0) ;; This isn't accurate but we don't do negative exponents
         1)
        (else (fast-expt-iter 1 b n))))

(define (fast-expt-iter a b n)
  (cond ((= n 0)
         a)
        ((even? n)
         (fast-expt-iter  (* a  (square b))  (square b) (- (/ n 2) 1)))
        (else
         (fast-expt-iter (* a b) b (dec n)))))


;; ---------------------------------

;; Exercise 1.17: The exponentiation algorithms in this section are based on
;; performing exponentiation by means of repeated multiplication. In a similar
;; way, one can perform integer multiplication by means of repeated addition.
;; The following multiplication procedure (in which it is assumed that our
;; language can only add, not multiply) is analogous to the expt procedure:

(define (my-* a b)
  (if (= b 0)
      0
      (+ a (my-* a (- b 1)))))

;; This algorithm takes a number of steps that is linear in b. Now suppose we
;; include, together with addition, operations double, which doubles an integer,
;; and halve, which divides an (even) integer by 2. Using these, design a
;; multiplication procedure analogous to fast-expt that uses a logarithmic
;; number of steps.

(define (double x)
  (* 2 x))

(define (halve x)
  ;; Assume x is even
  (/ x 2))

(define (fast-* a b)
  (cond ((= b 0)
         0)
        ((even? b)
         (fast-* (double a) (halve b)))
        (else
         (+ a (fast-* a (- b 1))))))


;; ---------------------------

;; Exercise 1.18: Using the results of Exercise 1.16 and Exercise 1.17, devise a
;; procedure that generates an iterative process for multiplying two integers in
;; terms of adding, doubling, and halving and uses a logarithmic number of
;; steps.

(define (fast-*-2 a b)
  (fast-*-iter 0 a b))

(define (fast-*-iter c a b)
  (cond ((= b 0)
         c)
        ((even? b)
         (fast-*-iter c (double a) (halve b)))
        (else
         (fast-*-iter (+ c a) a (- b 1)))))



;; --------------------------------

;; Exercise 1.19: There is a clever algorithm for computing the Fibonacci
;; numbers in a logarithmic number of steps. Recall the transformation of the
;; state variables aa and bb in the fib-iter process of 1.2.2: a←a+ba←a+b and
;; b←ab←a. Call this transformation TT, and observe that applying TT over and
;; over again nn times, starting with 1 and 0, produces the pair
;; Fib(n+1)Fib(n+1) and Fib(n)Fib(n). In other words, the Fibonacci numbers are
;; produced by applying TnTn, the nthnth power of the transformation TT,
;; starting with the pair (1, 0). Now consider TT to be the special case of
;; p=0p=0 and q=1q=1 in a family of transformations TpqTpq, where TpqTpq
;; transforms the pair (a,b)(a,b) according to a←bq+aq+apa←bq+aq+ap and
;; b←bp+aqb←bp+aq. Show that if we apply such a transformation TpqTpq twice, the
;; effect is the same as using a single transformation Tp′q′Tp′q′ of the same
;; form, and compute p′p′ and q′q′ in terms of pp and qq. This gives us an
;; explicit way to square these transformations, and thus we can compute TnTn
;; using successive squaring, as in the fast-expt procedure. Put this all
;; together to complete the following procedure, which runs in a logarithmic
;; number of steps:

;; Solution

;; Running through the algebra, we find that T_{p'q'} is such that
;; q' = 2PW+q^2 and p = p^2 + q^2 

(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0) 
         b)
        ((even? count)
         (fib-iter a
                   b
                   (+ (* p p) (* q q)) ;; ⟨??⟩  ;compute p'
                   (+ (* 2 p q) (* q q)) ;; ⟨??⟩  ;compute q'
                   (/ count 2)))
        (else 
         (fib-iter (+ (* b q) 
                      (* a q) 
                      (* a p))
                   (+ (* b p) 
                      (* a q))
                   p
                   q
                   (- count 1)))))


;; --------------------------------------------

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))


;; Exercise 1.20: The process that a procedure generates is of course dependent
;; on the rules used by the interpreter. As an example, consider the iterative
;; gcd procedure given above. Suppose we were to interpret this procedure using
;; normal-order evaluation, as discussed in 1.1.5. (The normal-order-evaluation
;; rule for if is described in Exercise 1.5.) Using the substitution method (for
;; normal order), illustrate the process generated in evaluating (gcd 206 40)
;; and indicate the remainder operations that are actually performed. How many
;; remainder operations are actually performed in the normal-order evaluation of
;; (gcd 206 40)? In the applicative-order evaluation?

;; Solution

;; In normal order

(gcd 206 40)

(if (= 40 0)
    206
    (gcd 40 (remainder 206 40)))

(gcd 40 (remainder 206 40))

(if (= (remainder 206 40) 0)
    40
    (gcd (remainder 206 40) (remainder 40 (remainder 206 40))))

(if (= 6 0) ;; 1 remainder
    40
    (gcd (remainder 206 40) (remainder 40 (remainder 206 40))))

(gcd (remainder 206 40) (remainder 40 (remainder 206 40)))

(if (= (remainder 40 (remainder 206 40)) 0) ;; 2 remainder
    (remainder 206 40)
    (gcd (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))

(if (= (remainder 40 6) 0)
    (remainder 206 40)
    (gcd (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))


(if (= 4 0)
    (remainder 206 40)
    (gcd (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))

(gcd (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

(if (= (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) 0) ;; 4 remainder
    (remainder 40 (remainder 206 40))
    (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
         (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))

(if (= (remainder 6 (remainder 40 (remainder 206 40))) 0)
    (remainder 40 (remainder 206 40))
    (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
         (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))

(if (= (remainder 6 (remainder 40 6)) 0)
    (remainder 40 (remainder 206 40))
    (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
         (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))

(if (= (remainder 6 4) 0)
    (remainder 40 (remainder 206 40))
    (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
         (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))


(if (= 2 0)
    (remainder 40 (remainder 206 40))
    (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
         (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))

(gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
     (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))


(if (= (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))) 0)    ;; 7 remainders
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
    (gcd (remainder )
         (remainder (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

                    (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
                               (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))))

(if (= (remainder (remainder 40 6) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))) 0)
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
    (gcd (remainder )
         (remainder (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

                    (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
                               (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))))

(if (= (remainder (remainder 40 6) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))) 0)
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
    (gcd (remainder )
         (remainder (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

                    (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
                               (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))))

(if (= (remainder (remainder 40 6) (remainder 6 (remainder 40 (remainder 206 40)))) 0)
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
    (gcd (remainder )
         (remainder (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

                    (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
                               (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))))

(if (= (remainder (remainder 40 6) (remainder 6 (remainder 40 6))) 0)
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
    (gcd (remainder )
         (remainder (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

                    (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
                               (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))))

(if (= (remainder 4 (remainder 6 (remainder 40 6))) 0)
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
    (gcd (remainder )
         (remainder (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

                    (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
                               (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))))

(if (= (remainder 4 (remainder 6 4)) 0)
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
    (gcd (remainder )
         (remainder (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

                    (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
                               (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))))

(if (= (remainder 4 2) 0)
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
    (gcd (remainder )
         (remainder (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

                    (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
                               (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))))

(if (= 0 0)
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
    (gcd (remainder )
         (remainder (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

                    (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
                               (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))))

(remainder (remainder 206 40) (remainder 40 (remainder 206 40))) ;; 4 remainders

(remainder (remainder 206 40) (remainder 40 6))

(remainder (remainder 206 40) 4)

(remainder 6 4)

2


;; In normal order evaluation, 18 remainders are performed, 12 to evaluate if statement
;; Applicative order needs 4 remainders to solve it.


;; -----------------------------------------


(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) 
         n)
        ((divides? test-divisor n) 
         test-divisor)
        (else (find-divisor 
               n 
               (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

;; Exercise 1.21: Use the smallest-divisor procedure to find the smallest divisor of each of the following numbers: 199, 1999, 19999.

;; Solution

(smallest-divisor 199)
;; => 199

(smallest-divisor 1999)
;; => 1999

(smallest-divisor 19999)
;; => 7


;; -----------------------------------------

;; Exercise 1.22: Most Lisp implementations include a primitive called runtime
;; that returns an integer that specifies the amount of time the system has been
;; running (measured, for example, in microseconds). The following
;; timed-prime-test procedure, when called with an integer nn, prints nn and
;; checks to see if nn is prime. If nn is prime, the procedure prints three
;; asterisks followed by the amount of time used in performing the test.

;; for chicken
(define (runtime)
  (current-milliseconds))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) 
                       start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))


;; Using this procedure, write a procedure search-for-primes that checks the
;; primality of consecutive odd integers in a specified range. Use your
;; procedure to find the three smallest primes larger than 1000; larger than
;; 10,000; larger than 100,000; larger than 1,000,000. Note the time needed to
;; test each prime. Since the testing algorithm has order of growth of
;; Θ(n⎯⎯√)Θ(n), you should expect that testing for primes around 10,000 should
;; take about 10⎯⎯⎯⎯√10 times as long as testing for primes around 1000. Do your
;; timing data bear this out? How well do the data for 100,000 and 1,000,000
;; support the Θ(n⎯⎯√)Θ(n) prediction? Is your result compatible with the notion
;; that programs on your machine run in time proportional to the number of steps
;; required for the computation?


(define (search-for-primes start end)
  (cond
   ((>= start end )
    nil)
   ((even? start)
    (search-for-primes (inc start) end))
   (else
    (timed-prime-test start)
    (search-for-primes (+ start 2) end))))


;; Primes larger than 1000
;; 1009, 1013, 1019

;; Primes larger than 10000
;; 10007, 10009, 10037

;; Primes larger than 100000
;; 100003, 100019, 100043

;; Primes larger than 1000000
;; 1000003, 1000033, 1000037


;; These numbers are too small to give significant enough timing on my computer, so we choose some larger numbers

(timed-prime-test 10000019)
;; 10000019 *** 1.0
(timed-prime-test 100000007)
;; 100000007 *** 3.0
(timed-prime-test 1000000007)
;; 1000000007 *** 10.0
(timed-prime-test 10000000019)
;; 10000000019 *** 31.0

;; We see that each order of magnitude increase increases the runtime by about a
;; factor of 3, which bears out the Θ(sqrt(n)) hypothesis since sqrt(10) is
;; ~3.16.

;; This support the notion that programs on my machine run in time proportional
;; to the number of steps in their computations


;; ------------------------------------------

;; Exercise 1.23: The smallest-divisor procedure shown at the start of this
;; section does lots of needless testing: After it checks to see if the number
;; is divisible by 2 there is no point in checking to see if it is divisible by
;; any larger even numbers. This suggests that the values used for test-divisor
;; should not be 2, 3, 4, 5, 6, …, but rather 2, 3, 5, 7, 9, …. To implement
;; this change, define a procedure next that returns 3 if its input is equal to
;; 2 and otherwise returns its input plus 2. Modify the smallest-divisor
;; procedure to use (next test-divisor) instead of (+ test-divisor 1). With
;; timed-prime-test incorporating this modified version of smallest-divisor, run
;; the test for each of the 12 primes found in Exercise 1.22. Since this
;; modification halves the number of test steps, you should expect it to run
;; about twice as fast. Is this expectation confirmed? If not, what is the
;; observed ratio of the speeds of the two algorithms, and how do you explain
;; the fact that it is different from 2?


(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) 
         n)
        ((divides? test-divisor n) 
         test-divisor)
        (else (find-divisor 
               n 
               (next-divisor test-divisor)))))

(define (next-divisor n)
  (if (= n 2)
      3
      (+ n 2)))

(timed-prime-test 10000019)
;; 10000019 *** 1.0
(timed-prime-test 100000007)
;; 100000007 *** 3.0
(timed-prime-test 1000000007)
;; 1000000007 *** 6.0
(timed-prime-test 10000000019)
;; 10000000019 *** 20.0

;; We see it run about 2/3 as fast, which makes sense since a lot of the time I
;; expect to be warmup that constant to all tests. But I don't really know.


;; ----------------------------------------------


;; Exercise 1.24: Modify the timed-prime-test procedure of Exercise 1.22 to use
;; fast-prime? (the Fermat method), and test each of the 12 primes you found in
;; that exercise. Since the Fermat test has Θ(logn)Θ(log⁡n) growth, how would you
;; expect the time to test primes near 1,000,000 to compare with the time needed
;; to test primes near 1000? Do your data bear this out? Can you explain any
;; discrepancy you find?


(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (fast-prime? n 100000)
      (report-prime (- (runtime) 
                       start-time))))


;; I think my machine might be a bit too fast for this
