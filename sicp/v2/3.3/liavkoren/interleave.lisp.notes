(define (interleave x y)
  (if (stream-null? x)
      y
      (cons-stream (stream-car x)
                   (interleave y (stream-cdr x)))))

x: 1 2 3 4 5 6 7 8 9 10 11 ...
y: A B C D E F G H I J K L ...

(interleave x y):
1 . (interleave y (2 3 4 5...))
1 . A . (interleave (2 3 4 5...) (B C D E...))
1 . A . 2 . (interleave (B C D E...) (3 4 5...))
1 . A . 2 . B .


(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave

    (stream-map (lambda (x) (list (stream-car s) x))    ; the nth row of matrix. Given x, return `((car s) x)
                (stream-cdr t))                         ; where x is taken from (cdr t)
    (pairs (stream-cdr s) (stream-cdr t)))))
(define int-pairs (pairs integers integers))


(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))

(pairs integers integers')

1 1' . (interleave (1 2').(1 3' 1 4') pairs(2.3.4... 2'.3'.4'...) -->
1 1'. 1 2' . (interleave )


00: (1 1)   01: (1 2)   03: (1 3)   05: (1 4)   07: (1 5)   09: (1 6)  11: (1 7)   13: (1 8)   15: (1 9)   17: (1 10)  19: (1 11)  21: (1 12)  23: (1 13)  25: (1 14)  27: (1 15)  29: (1 16)  31: (1 17)  33: (1 18)  35: (1 19)  37: (1 20)   39: (1 21)
            02: (2 2)   04: (2 3)   08: (2 4)   12: (2 5)   16: (2 6)  20: (2 7)   24: (2 8)   28: (2 9)   32: (2 10)  36: (2 11)
                        06: (3 3)   10: (3 4)   18: (3 5)   26: (3 6)  34: (3 7)
                                    14: (4 4)   22: (4 5)   38: (4 6)
                                                30: (5 5)

row periods
-----------
1: 2
2: 4
3: 8
4: 16






