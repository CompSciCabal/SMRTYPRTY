#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 64 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 20 #"Anonymous Pro Minus\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 158 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 211 72 255 0 0 0 -1 -1 2
35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 211 72 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 150 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 20 #"Anonymous Pro Minus\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1           0 3594 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 25 3 1 #" "
0 0 14 3 6 #"racket"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 5 #"apply"
0 0 25 3 1 #" "
0 0 14 3 26 #"apply-in-underlying-scheme"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 25 #"eval-in-underlying-scheme"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 15 #"underlying-cons"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 15 #"underlying-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 14 #"underlying-car"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 14 #"underlying-cdr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 16 #"underlying-pair?"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 25 3 1 #" "
0 0 14 3 4 #"r5rs"
0 0 25 3 1 #" "
0 0 14 3 8 #"set-car!"
0 0 25 3 1 #" "
0 0 14 3 8 #"set-cdr!"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 25 3 1 #" "
0 0 14 3 19 #"compatibility/mlist"
0 0 25 3 1 #" "
0 0 14 3 5 #"mlist"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";Fudge pairs into mpairs:"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 5 #"mcons"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"mcar"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"mcdr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 5 #"mlist"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"items"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"cdar"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"items"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"items"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"caadr"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"items"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"cdadr"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"items"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"cddr"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"items"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"cdddr"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"items"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"items"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 6 #"mpair?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"items"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"self-evaluating?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 4 #"true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 7 #"string?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 4 #"true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 5 #"false"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"tag"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 3 #"eq?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 3 #"tag"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 5 #"false"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"quoted?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"quote"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"text-of-quotation"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"assignment?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 19 #"assignment-variable"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"assignment-value"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 15 3 11 #"definition?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 6 #"define"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 15 3 19 #"definition-variable"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 5 #"caadr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 15 3 16 #"definition-value"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 5 #"caddr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 11 #"make-lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"cdadr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 4 #")   "
0 0 17 3 19 #"; formal parameters"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 4 #"cddr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 5 #")))) "
0 0 17 3 6 #"; body"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"lambda?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"lambda-parameters"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"lambda-body"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 25 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"if?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"if"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"if-predicate"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"if-consequent"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"if-alternative"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 6 #"cadddr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 1 #"'"
0 0 14 3 5 #"false"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"make-if"
0 0 25 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 25 3 1 #" "
0 0 14 3 10 #"consequent"
0 0 25 3 1 #" "
0 0 14 3 11 #"alternative"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 25 3 1 #" "
0 0 14 3 10 #"consequent"
0 0 25 3 1 #" "
0 0 14 3 11 #"alternative"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 15 3 6 #"begin?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 15 3 13 #"begin-actions"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"last-exp?"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"rest-exps"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"let?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 3 #"let"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"let-assignment"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"let-body"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"let-exp"
0 0 25 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 7 #"let-exp"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"let-var"
0 0 25 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 7 #"let-var"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"let->combination"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"transform-let"
0 0 25 3 2 #" ("
0 0 14 3 14 #"let-assignment"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 8 #"let-body"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"transform-let"
0 0 25 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 25 3 2 #" ("
0 0 14 3 7 #"let-var"
0 0 25 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 25 3 2 #") "
0 0 14 3 4 #"body"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 7 #"let-exp"
0 0 25 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"delay-it"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"thunk"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"thunk?"
0 0 25 3 1 #" "
0 0 14 3 3 #"obj"
0 0 25 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"obj"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"thunk"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"thunk-exp"
0 0 25 3 1 #" "
0 0 14 3 5 #"thunk"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 5 #"thunk"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"thunk-env"
0 0 25 3 1 #" "
0 0 14 3 5 #"thunk"
0 0 25 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 25 3 1 #" "
0 0 14 3 5 #"thunk"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"force-it"
0 0 25 3 1 #" "
0 0 14 3 3 #"obj"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"thunk?"
0 0 25 3 1 #" "
0 0 14 3 3 #"obj"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 12 #"actual-value"
0 0 25 3 2 #" ("
0 0 14 3 9 #"thunk-exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"obj"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 9 #"thunk-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"obj"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 3 #"obj"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"actual-value"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"force-it"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 6 #"self-e"
0 0 14 3 1 #"v"
0 0 14 3 4 #"alua"
0 0 14 3 1 #"t"
0 0 14 3 4 #"ing?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 9 #"variable?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 21 #"lookup-variable-value"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 7 #"quoted?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 17 #"text-of-quotation"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 11 #"assignment?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 15 #"eval-assignment"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 15 3 11 #"definition?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 15 #"eval-definition"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 3 #"if?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 7 #"eval-if"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 7 #"lambda?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 14 #"make-procedure"
0 0 25 3 2 #" ("
0 0 14 3 17 #"lambda-parameters"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 11 #"lambda-body"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                         "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 15 3 6 #"begin?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 13 #"eval-sequence"
0 0 25 3 2 #" ("
0 0 15 3 13 #"begin-actions"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 5 #"cond?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 8 #"cond->if"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 4 #"let?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 16 #"let->combination"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 12 #"application?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 5 #"apply"
0 0 25 3 2 #" ("
0 0 14 3 12 #"actual-value"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 8 #"operands"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 33 #"\"Unknown expression type -- EVAL\""
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"list-of-arg-values"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 12 #"no-operands?"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 12 #"actual-value"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 13 #"first-operand"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 18 #"list-of-arg-values"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 13 #"rest-operands"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 14 3 3 #"env"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 20 #"list-of-delayed-args"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 12 #"no-operands?"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 8 #"delay-it"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 13 #"first-operand"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 20 #"list-of-delayed-args"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 13 #"rest-operands"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 14 3 3 #"env"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 25 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 25 3 1 #" "
0 0 14 3 9 #"arguments"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 20 #"primitive-procedure?"
0 0 25 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 25 #"apply-primitive-procedure"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 9 #"procedure"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 18 #"list-of-arg-values"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 14 3 9 #"arguments"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 14 3 3 #"env"
0 0 25 3 5 #")))  "
0 0 17 3 9 #"; changed"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 19 #"compound-procedure?"
0 0 25 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 13 #"eval-sequence"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 14 #"procedure-body"
0 0 25 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 18 #"extend-environment"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 20 #"procedure-parameters"
0 0 25 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 20 #"list-of-delayed-args"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 9 #"arguments"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 3 #"env"
0 0 25 3 4 #")   "
0 0 17 3 9 #"; changed"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 21 #"procedure-environment"
0 0 25 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 19 #"\"Unknown procedure "
0 0 19 29 1 #"\n"
0 0 19 3 34 #"                      type: APPLY\""
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                     "
0 0 14 3 9 #"procedure"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 25 #"apply-primitive-procedure"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"mlist->list"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 2 #") "
0 0 17 3 60
#"; converts mpairs to normal pairs for the underlying scheme."
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 15 #"underlying-cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 3 #") ("
0 0 14 3 11 #"mlist->list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 3 #") ("
0 0 14 3 26 #"apply-in-underlying-scheme"
0 0 25 3 2 #" ("
0 0 14 3 24 #"primitive-implementation"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 3 #") ("
0 0 14 3 11 #"mlist->list"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 26 #"apply-in-underlying-scheme"
0 0 25 3 2 #" ("
0 0 14 3 24 #"primitive-implementation"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 2 #") "
0 0 14 3 4 #"args"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 24 #"primitive-implementation"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-frame"
0 0 25 3 1 #" "
0 0 14 3 9 #"variables"
0 0 25 3 1 #" "
0 0 14 3 6 #"values"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 9 #"variables"
0 0 25 3 1 #" "
0 0 14 3 6 #"values"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"frame-values"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 21 #"add-binding-to-frame!"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"set-car!"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"set-cdr!"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"extend-environment"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #" "
0 0 14 3 8 #"base-env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 3 #") ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-frame"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 2 #") "
0 0 14 3 8 #"base-env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 3 #") ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 29 #"\"Too many arguments supplied\""
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 28 #"\"Too few arguments supplied\""
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 19 #"compound-procedure?"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 20 #"procedure-parameters"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"procedure-body"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 21 #"procedure-environment"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 3 #") ("
0 0 14 3 6 #"cadddr"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 21 #"enclosing-environment"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 21 #"lookup-variable-value"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"env-loop"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 8 #"env-loop"
0 0 25 3 2 #" ("
0 0 14 3 21 #"enclosing-environment"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 2 #") "
0 0 19 3 14 #"\"*unassigned*\""
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 21 #"\"Unassigned variable\""
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"Unbound variable\""
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 5 #"frame"
0 0 25 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 4 #"scan"
0 0 25 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 12 #"frame-values"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"env-loop"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"make-procedure"
0 0 25 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 25 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 20 #"primitive-procedure?"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"primitive"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"list-of-values"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 12 #"no-operands?"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 13 #"first-operand"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 14 #"list-of-values"
0 0 25 3 2 #" ("
0 0 14 3 13 #"rest-operands"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 5 #"false"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 5 #"false"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"eval-if"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 25 3 2 #" ("
0 0 14 3 12 #"actual-value"
0 0 25 3 2 #" ("
0 0 14 3 12 #"if-predicate"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                           "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 13 #"if-consequent"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 14 #"if-alternative"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 19 #"set-variable-value!"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"env-loop"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 8 #"env-loop"
0 0 25 3 2 #" ("
0 0 14 3 21 #"enclosing-environment"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 8 #"set-car!"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 26 #"\"Unbound variable -- SET!\""
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 5 #"frame"
0 0 25 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 4 #"scan"
0 0 25 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 12 #"frame-values"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"env-loop"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"eval-sequence"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 9 #"last-exp?"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 13 #"eval-sequence"
0 0 25 3 2 #" ("
0 0 14 3 9 #"rest-exps"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"eval-assignment"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 19 #"set-variable-value!"
0 0 25 3 2 #" ("
0 0 14 3 19 #"assignment-variable"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 16 #"assignment-value"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                       "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 22 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 15 3 16 #"define-variable!"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 5 #"frame"
0 0 25 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 21 #"add-binding-to-frame!"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 8 #"set-car!"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"scan"
0 0 25 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 12 #"frame-values"
0 0 25 3 1 #" "
0 0 14 3 5 #"frame"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"eval-definition"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 16 #"define-variable!"
0 0 25 3 2 #" ("
0 0 15 3 19 #"definition-variable"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 15 3 16 #"definition-value"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 22 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"sequence->exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 2 #") "
0 0 14 3 3 #"seq"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 9 #"last-exp?"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 3 #") ("
0 0 14 3 9 #"first-exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-begin"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-begin"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 25 3 1 #" "
0 0 14 3 3 #"seq"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"application?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operands"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"no-operands?"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"first-operand"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"rest-operands"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"cond?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 4 #"cond"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"cond-clauses"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"cond-else-clause?"
0 0 25 3 1 #" "
0 0 14 3 6 #"clause"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"eq?"
0 0 25 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 25 3 1 #" "
0 0 14 3 6 #"clause"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 4 #"else"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 25 3 1 #" "
0 0 14 3 6 #"clause"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 6 #"clause"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"cond-actions"
0 0 25 3 1 #" "
0 0 14 3 6 #"clause"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 6 #"clause"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"cond->if"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 14 #"expand-clauses"
0 0 25 3 2 #" ("
0 0 14 3 12 #"cond-clauses"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"expand-clauses"
0 0 25 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 1 #"'"
0 0 14 3 5 #"false"
0 0 25 3 26 #"                          "
0 0 17 3 16 #"; no else clause"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"rest"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 17 #"cond-else-clause?"
0 0 25 3 1 #" "
0 0 14 3 5 #"first"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 13 #"sequence->exp"
0 0 25 3 2 #" ("
0 0 14 3 12 #"cond-actions"
0 0 25 3 1 #" "
0 0 14 3 5 #"first"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 36 #"\"ELSE clause isn't last -- COND->IF\""
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                       "
0 0 14 3 7 #"clauses"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 7 #"make-if"
0 0 25 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 25 3 1 #" "
0 0 14 3 5 #"first"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 13 #"sequence->exp"
0 0 25 3 2 #" ("
0 0 14 3 12 #"cond-actions"
0 0 25 3 1 #" "
0 0 14 3 5 #"first"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 14 #"expand-clauses"
0 0 25 3 1 #" "
0 0 14 3 4 #"rest"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 20 #"primitive-procedures"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 4 #"cons"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"null?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 4 #"list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"mcons"
0 0 25 3 1 #" "
0 0 14 3 5 #"mcons"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 1 #"*"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 1 #"="
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        ))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 27 #"primitive-procedure-objects"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"primitive"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 14 3 20 #"primitive-procedures"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 25 #"primitive-procedure-names"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 14 3 20 #"primitive-procedures"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"setup-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 11 #"initial-env"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 18 #"extend-environment"
0 0 25 3 2 #" ("
0 0 14 3 25 #"primitive-procedure-names"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ("
0 0 14 3 27 #"primitive-procedure-objects"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                             "
0 0 14 3 21 #"the-empty-environment"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 16 #"define-variable!"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 14 3 11 #"initial-env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 16 #"define-variable!"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"false"
0 0 25 3 1 #" "
0 0 14 3 5 #"false"
0 0 25 3 1 #" "
0 0 14 3 11 #"initial-env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 11 #"initial-env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 2 #" ("
0 0 14 3 17 #"setup-environment"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"list->mlist"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 16 #"underlying-pair?"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 14 #"underlying-car"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 3 #") ("
0 0 14 3 11 #"list->mlist"
0 0 25 3 2 #" ("
0 0 14 3 14 #"underlying-cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 4 #"args"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"input-prompt"
0 0 25 3 1 #" "
0 0 19 3 19 #"\";;; M-Eval input:\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"output-prompt"
0 0 25 3 1 #" "
0 0 19 3 19 #"\";;; M-Eval value:\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"driver-loop"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"prompt-for-input"
0 0 25 3 1 #" "
0 0 14 3 12 #"input-prompt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 5 #"input"
0 0 25 3 2 #" ("
0 0 14 3 11 #"list->mlist"
0 0 25 3 2 #" ("
0 0 14 3 4 #"read"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 6 #"output"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #" "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 15 #"announce-output"
0 0 25 3 1 #" "
0 0 14 3 13 #"output-prompt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"user-print"
0 0 25 3 1 #" "
0 0 14 3 6 #"output"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"driver-loop"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"prompt-for-input"
0 0 25 3 1 #" "
0 0 14 3 6 #"string"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 25 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 25 3 3 #") ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 14 3 6 #"string"
0 0 25 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"announce-output"
0 0 25 3 1 #" "
0 0 14 3 6 #"string"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 25 3 3 #") ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 14 3 6 #"string"
0 0 25 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"user-print"
0 0 25 3 1 #" "
0 0 14 3 6 #"object"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 19 #"compound-procedure?"
0 0 25 3 1 #" "
0 0 14 3 6 #"object"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 18 #"compound-procedure"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 20 #"procedure-parameters"
0 0 25 3 1 #" "
0 0 14 3 6 #"object"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 14 #"procedure-body"
0 0 25 3 1 #" "
0 0 14 3 6 #"object"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                     "
0 0 22 3 1 #"'"
0 0 14 3 15 #"<procedure-env>"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 14 3 6 #"object"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; (driver-loop)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 16 #"; Exercise EVAL:"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 25 3 1 #" "
0 0 22 3 3 #"'10"
0 0 25 3 2 #") "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"y"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"y"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"y"
0 0 25 3 5 #")))) "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 4 #"eval"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 6 #"append"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"6"
0 0 17 3 3 #")) "
0 0 17 3 24 #"the-global-environment) "
0 0 17 3 4 #";<--"
0 0 17 3 1 #" "
0 0 17 3 5 #"doesn"
0 0 17 3 1 #"'"
0 0 17 3 1 #"t"
0 0 17 3 1 #" "
0 0 17 3 4 #"work"
0 0 17 3 1 #" "
0 0 17 3 7 #"because"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 9 #"evaluator"
0 0 17 3 1 #" "
0 0 17 3 5 #"steps"
0 0 17 3 1 #" "
0 0 17 3 4 #"down"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 2 #" ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 6 #"3) and"
0 0 25 29 1 #"\n"
0 0 17 3 35 #"; thinks that 1 is a proc to call. "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 0 25 3 2 #") "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 25 3 1 #" "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 22 3 4 #"2000"
0 0 25 3 1 #" "
0 0 19 3 21 #"\"if with truthy cond\""
0 0 25 3 2 #") "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"false"
0 0 25 3 1 #" "
0 0 22 3 4 #"2000"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"if with false.\""
0 0 25 3 2 #") "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 3 #")) "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"bar"
0 0 25 3 1 #" "
0 0 22 3 3 #"555"
0 0 25 3 3 #")) "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"square"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"x"
0 0 25 3 3 #")) "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"square"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 118
(
 #"; (eval (list 'cond (list (list 'false \"ack\") (list 'false \"foo\""
 #") (list 'true \"cond output\"))) the-global-environment)"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 5 #"apply"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"primitive"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #") "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"test2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 3 #"let"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"foo"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"bar"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 1 #"x"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"test3"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"*unassigned*\""
0 0 25 3 2 #") "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 67
#"; (eval 'test3 the-global-environment) ; <-- raises expected error."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"try"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"b"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"b"
0 0 25 3 3 #")) "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"try"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"/"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")) "
0 0 14 3 22 #"the-global-environment"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0
