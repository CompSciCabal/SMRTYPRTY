#lang racket
(require "tools.rkt")
(print-as-expression #f)
(pretty-print-abbreviate-read-macros #f)
(define-syntax example
  (syntax-rules ()
    ((_ e) (begin (newline)
                  (pretty-print 'e)
                  (displayln "==>")
                  (time (pretty-print e))))))
(define-syntax examples
  (syntax-rules ()
    ((_ e ...) (begin (example e) ...))))

(define (var? x)
  (and (symbol? x) (string-prefix? (symbol->string x) "?")))
(define (vars d)
  (remove-duplicates
    (let loop ((d d))
      (cond ((var? d) (list d))
            ((pair? d) (append (loop (car d)) (loop (cdr d))))
            ((vector? d) (loop (vector->list d)))
            (else '())))))

(define env-empty '())
(define (walk env d)
  (cond ((var? d) (let ((b (assoc d env)))
                    (if b (walk env (cdr b)) d)))
        (else     d)))
(define (walk* env d)
  (define (loop d) (walk* env d))
  (cond ((pair? d)   (cons (loop (car d)) (loop (cdr d))))
        ((vector? d) (vector-map loop d))
        ((var? d)    (let ((b (assoc d env)))
                       (if b (loop (cdr b)) d)))
        (else        d)))
(define (occurs? env v x)
  (define (loop d) (occurs? env v (walk env d)))
  (or (eqv? v x)
      (and (pair? x) (or (loop (car x)) (loop (cdr x))))
      (and (vector? x) (loop (vector->list x)))))
(define (rename-vars d)
  (walk* (map (lambda (v) (cons v (gensym v))) (vars d)) d))

(define (unify-var env v x)
  (and (not (occurs? env v x))
       (cons (cons v x) env)))
(define (unify/env env x y)
  (and env
       (let ((x (walk env x)) (y (walk env y)))
         (cond ((eqv? x y) env)
               ((var? x) (unify-var env x y))
               ((var? y) (unify-var env y x))
               ((and (pair? x) (pair? y))
                (unify/env (unify/env env (car x) (car y))
                           (cdr x) (cdr y)))
               (else #f)))))
(define (unify x y) (unify/env env-empty x y))
(define (unifier x y) (walk* (unify x y) x))

(define empty-database (hash))
(define *database* empty-database)
(define (clause-head c)        (car c))
(define (clause-body c)        (cdr c))
(define (predicate relation)   (car relation))
(define (predicate->clauses p) (hash-ref *database* p '()))
(define (add-clause! c)
  (define p (predicate (clause-head c)))
  (unless (and (symbol? p) (not (var? p))) (error "invalid predicate:" p))
  (set! *database*
    (hash-set *database* p
              (append (predicate->clauses p) (list c)))))
(define (remove-predicate! p) (hash-remove *database* p))
(define (clear-database!) (set! *database* empty-database))

(define (prove env goal)
  (append* (map (lambda (clause)
                  (let ((new-clause (rename-vars clause)))
                    (prove* (unify/env env goal (clause-head new-clause))
                            (clause-body new-clause))))
                (predicate->clauses (predicate goal)))))
(define (prove* env goals)
  (cond ((not env)     '())
        ((null? goals) (list env))
        (else (append* (map (lambda (s1) (prove* s1 (cdr goals)))
                            (prove env (car goals)))))))
(define (top-level-prove goals)
  (define envs (prove* env-empty goals))
  (map (lambda (env)
         (map (lambda (v) `(,v = ,(walk* env v))) (vars goals)))
       envs))

(define-syntax <-
  (syntax-rules () ((_ . clause) (add-clause! 'clause))))
(define-syntax ?-
  (syntax-rules () ((_ . goals) (top-level-prove 'goals))))

(examples
  (unify '(?x + 1) '(2 + ?y))
  (unify '?x '?y)
  (unify '(?x ?x) '(?y ?y))
  (unify '(?x ?x ?x) '(?y ?y ?y))
  (unify '(?x ?y) '(?y ?x))
  (unify '(?x ?x a) '(?y ?y ?y))
  (unify '?x '(f ?x))
  (unify '(f ?x) '(f ?y))
  (unify '(?a + ?a = 0) '(?x + ?y = ?y))
  (unify '(?x ?y a) '(?y ?x ?x))
  (unify '(?x ?y) '((f ?y) (f ?x)))
  (unify '(?x ?y ?z) '((?y ?z) (?x ?z) (?x ?y)))
  (unify 'a 'a)

  (unifier '(?a + ?a = 0) '(?x + ?y = ?y))
  (unifier '(?a + ?a = 2) '(?x + ?y = ?y))
  (unifier '(?x ?y a) '(?y ?x ?x))
  (unifier '((?a * ?x ^ 2) + (?b * ?x) + ?c)
           '(?z + (4 * 5) + 3))
  )

(<- (likes Kim Robin))
(<- (likes Sandy Lee))
(<- (likes Sandy Kim))
(<- (likes Robin cats))
(<- (likes Sandy ?x) (likes ?x cats))
(<- (likes Kim ?x) (likes ?x Lee) (likes ?x Kim))
(<- (likes ?x ?x))

(examples
  (?- (likes Robin Lee))
  (?- (likes Sandy ?who))
  (?- (likes ?who Sandy))
  (?- (likes ?who Lee))
  (?- (likes ?x ?y) (likes ?y ?x))
  )

(<- (member ?item (?item . ?rest)))
(<- (member ?item (?x . ?rest)) (member ?item ?rest))
;; Alternative 1
;(<- (member ?item ?list)
    ;(= ?list (?item . ?rest)))
;(<- (member ?item ?list)
    ;(= ?list (?x . ?rest))
    ;(member ?item ?rest))
;; Alternative 2
;(<- (member ?item ?list)
    ;(= ?list (?first . ?rest))
    ;(or (= ?item ?first)
        ;(member ?item ?rest))))

(examples
  (?- (member 2 (1 2 3)))
  (?- (member 2 (1 2 3 2 1)))
  (?- (member ?x (1 2 3)))
  )

